name: build-lambda-artifacts
on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  workflow_dispatch: {}

jobs:
  storage:
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    env: { AWS_REGION: us-east-1 }
    outputs:
      bucket: ${{ steps.out.outputs.bucket }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.12.2 }

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: gha-artifacts
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init/apply (storage)
        run: |
          terraform -chdir=env/shared/global/storage init -upgrade -input=false
          terraform -chdir=env/shared/global/storage apply -auto-approve

      - name: Read bucket name
        id: out
        run: |
          set -euo pipefail
          BKT=$(terraform -chdir=env/shared/global/storage output -raw artifacts_bucket_name || true)
          test -n "$BKT" || { echo "Empty artifacts_bucket_name"; exit 1; }
          echo "bucket=$BKT" >> "$GITHUB_OUTPUT"

  build:
    needs: storage
    runs-on: ubuntu-latest
    permissions: { id-token: write, contents: read }
    env:
      AWS_REGION: us-east-1
      ARTIFACTS_BUCKET: ${{ needs.storage.outputs.bucket }}
    steps:
      - uses: actions/checkout@v4

      - name: Zip rds-snapshot
        run: |
          cd services/rds-snapshot/src
          zip -r ../../../rds-snapshot.zip .

      - name: Zip rds-failover
        run: |
          cd services/rds-failover/src
          zip -r ../../../rds-failover.zip .

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          role-session-name: gha-artifacts
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload artifacts to S3 (unique keys per commit)
        run: |
          set -euo pipefail
          aws s3 cp rds-snapshot.zip s3://$ARTIFACTS_BUCKET/lambda/rds-snapshot/${GITHUB_SHA}.zip
          aws s3 cp rds-failover.zip  s3://$ARTIFACTS_BUCKET/lambda/rds-failover/${GITHUB_SHA}.zip

      - name: Compute base64(sha256) hashes
        id: hash
        run: |
          set -euo pipefail
          SNAP=$(openssl dgst -sha256 -binary rds-snapshot.zip | openssl base64 -A)
          FAIL=$(openssl dgst -sha256 -binary rds-failover.zip  | openssl base64 -A)
          echo "snapshot_hash=$SNAP" >> $GITHUB_OUTPUT
          echo "failover_hash=$FAIL" >> $GITHUB_OUTPUT

      - name: Save Lambda artifact info to SSM
        run: |
          set -euo pipefail
          aws ssm put-parameter --name "/i2508dr/ci/artifacts_bucket_name"  --type String --value "$ARTIFACTS_BUCKET" --overwrite
          aws ssm put-parameter --name "/i2508dr/ci/rds_snapshot_s3_key"    --type String --value "lambda/rds-snapshot/${GITHUB_SHA}.zip" --overwrite
          aws ssm put-parameter --name "/i2508dr/ci/rds_failover_s3_key"    --type String --value "lambda/rds-failover/${GITHUB_SHA}.zip" --overwrite
          aws ssm put-parameter --name "/i2508dr/ci/rds_snapshot_code_hash" --type String --value "${{ steps.hash.outputs.snapshot_hash }}" --overwrite
          aws ssm put-parameter --name "/i2508dr/ci/rds_failover_code_hash" --type String --value "${{ steps.hash.outputs.failover_hash }}" --overwrite